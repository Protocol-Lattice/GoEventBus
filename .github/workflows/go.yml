# This workflow will build, test, and check coverage for a Golang project

name: Go CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Code
      uses: actions/checkout@v3

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.22.2'
        cache: true  # Enables caching for Go modules

    - name: Verify Dependencies
      run: go mod tidy && go mod verify

    - name: Check Formatting
      run: test -z "$(gofmt -l .)" || (echo "Go code is not formatted, run 'gofmt -w .'" && exit 1)

    - name: Build
      run: go build -v ./...

    - name: Run Tests with Coverage
      run: |
        go test -v -race -coverprofile=coverage.out -covermode=atomic ./...
    
    - name: Display Coverage Report
      run: go tool cover -func=coverage.out

    - name: Enforce Minimum Coverage (Optional)
      run: |
        REQUIRED_COVERAGE=80.0  # Set your desired threshold
        ACTUAL_COVERAGE=$(go tool cover -func=coverage.out | grep total | awk '{print substr($3, 1, length($3)-1)}')
        if (( $(echo "$ACTUAL_COVERAGE < $REQUIRED_COVERAGE" | bc -l) )); then
          echo "Code coverage ($ACTUAL_COVERAGE%) is below the required threshold ($REQUIRED_COVERAGE%)"
          exit 1
        fi

    - name: Upload Coverage Report
      uses: actions/upload-artifact@v3
      with:
        name: coverage-report
        path: coverage.out
